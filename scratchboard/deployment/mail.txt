Hi Gregor,

I can imagine that organising the IPC in combination with teaching is a lot of work, so many thanks for looking into the domain.

I hope that the following comments clarify some of your questions:

Language Level and Features)
This was the only factor that worried me about the suitability of the domain for the competition. I have no experience with lifting domains, but I do trust you when you say it is doable to lift those features 

createInstance)
The main reason why we have modelled instantiation 'dynamically' is that a certain problem may need more than one instance of a component. If a component's instance has a port, which is already in use by another instance, we must create a new instance of that component. We call this instance duplication in the paper and in the JSON/HPDL files I shared with you.

Formula)
If I remember correctly, the semantics behind this is that all ports that are required by a component (to be in a running state) must be active and bound to instances. So, I think that your model reflects this.

Types)
One is the port and the other is a component type, and they should be distinct. This is a reflection of a real-world model, where the port is named 'mysql'. Renaming one of them should resolve the issue.

Let me know if I can be of any help.

Best,
Ilche

-----Original Message-----
From: Gregor Behnke <behnkeg@informatik.uni-freiburg.de> 
Sent: 07 April 2020 22:02
To: Pascal Bercher <Pascal.Bercher@anu.edu.au>; Georgievski, Ilche <ilche.georgievski@iaas.uni-stuttgart.de>
Subject: Re: HTN Planning Domains for IPC 2020

Hi @all,

As you may infer from my late answer, organising the IPC and teaching is a lot of work 

First of all: Thank you Ilche for the domain! It is definitely an interesting modelling idea and topic!

Since the domain itself looks very "HDDL-like" it should be somewhat easy to convert it into HDDL. I think I can do this on my own in a reasonable time. Below I'll comment/ask on certain elements of the domain.

Language Level and Features) The HDDL language supports a lot of features (quantors, conditional effects, disjunctions), so we can easily model your domain. The issue is "just" the restricted language of the competition. We only require STRIPS, but if I am not mistaken all current competitors also support universal quantified preconditions and effects.
Further, we have a automated translation that removes all "advanced features" (quantors, disjunctions, conditional effects) in a lifted fashion. For "forall" formulae however this is naturally instance dependent (there is an instance independent way using HTN features, but this will be quite nasty). With the kind of formulas that your domain contains (conditional effects with (forall (?x - X) (when ...) )), the translation currently blows up as we enumerate all 2^|X| possibilities for the conditional effect's guards. There is a linear compilation for conditional effects (maybe also for disjunctive preconditions) that adds lifted actions. I have not implemented this yet, but I can if it is needed.

createInstance)If I interpret the syntax correctly, the createInstance action adds a new fact (type i c) for i being the current value of instance number and then increments the global instance number. I.e. the values of the instance type are natural numbers.
I am wondering whether the "instance" is actually necessary? Via the (type ...) predicate every instance is bounded to a component. Does it make to instantiate a component more than once? If not, the component objects could be used instead of the instances, right?

Formula)
In makeRun, the method port-is-active-and-bound as the following formula as its precondition:
    (forall (?p - port) (and (running-require ?c ?p) (active ?p) (bound ?p ?i ?i1))) May this be wrong? Because here you test that ?c requires *all* ports.
This seems to be quite impossible. Also all existing ports would have to be active. Shouldn't it be
    (forall (?p - port) (imply (running-require ?c ?p) (and (active ?p) (bound ?p ?i ?i1)))) I.e. something like if ?c requires the port ?p, then ?p must be active and bound?

Types) In the wordpress instance, the mysql object belongs both to the component and port type. But these types are not related to each other.
Do you assume that these constants are different? Or are they just one constants belonging to two sorts? This is only an issue in this instance, in all the generated ones the constants for ports and components are disjunct.

Kind regards,
Gregor
