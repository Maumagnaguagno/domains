(define (domain deployment)
	(:requirements :hierarchy :typing)

    (:types port instance component)
    (:predicates
        (currentNextInstance ?i - instance)
		(next ?i ?i2 - instance)
		(type ?i - instance ?c - component)
        (installed ?i - instance)
        (running ?i - instance)
        (active ?p - port)
        (bound ?p - port ?i1 ?i2 - instance)
        (installed-require ?c - component ?p - port)
        (installed-provide ?c - component ?p - port)
        (running-require ?c - component ?p - port)
        (running-provide ?c - component ?p - port)
    )
    
	(:task createInstance        :parameters (?c - component))
	(:task install               :parameters (?i - instance))
    (:task activate              :parameters (?i - instance))
    (:task makeRun               :parameters (?i - instance))
    (:task activatePort          :parameters (?c - component ?p - port))
    (:task deactivatePort        :parameters (?c - component ?i - instance))
    (:task unbindPorts           :parameters (?i - instance))
    (:task install-configuration :parameters (?c - component))
    (:task run-configuration     :parameters (?c - component))



;;;;;;;;;;;;;;;;;;;;;;;;; methods for install-configuration
        
    (:method there-is-free-component-instance
		:parameters (?c - component ?i - instance)
		:task (install-configuration ?c)
        :precondition (and (type ?i ?c) (not (installed ?i)) (not (running ?i)))
        :subtasks (and (install ?i))
    )

    (:method no-free-instance
		:parameters (?c - component)
		:task (install-configuration ?c)
        :precondition ()
        :ordered-subtasks (and (createInstance ?c) (install-configuration ?c))
    )


;;;;;;;;;;;;;;;;;;;;;;;;; methods for install
	(:method component-instance-is-not-installed
        :parameters (?i - instance)
		:task (install ?i)
        :precondition (not (installed ?i))
        :subtasks (and (activate ?i))
	)

    (:method component-instance-is-already-installed-with-at-least-one-provide-port-bound
        :parameters (?i ?i1 - instance ?p - port ?c - component)
		:task (install ?i)
        :precondition (and (type ?i ?c) (installed ?i) (installed-provide ?c ?p) (bound ?p ?i1 ?i))
        :subtasks (and (install-configuration ?c))
    )

    (:method component-instance-already-installed-and-free
        :parameters (?i - instance ?c - component)
		:task (install ?i)
        :precondition (and
			(type ?i ?c)
			(installed ?i)
			(forall (?p - port) (imply 
				(installed-provide ?c ?p)
				(not (exists (?i1 - instance) (bound ?p ?i1 ?i))))))
        :subtasks ()
    )

;;;;;;;;;;;;;;;;;;;;;;;;; methods for activate
        (:method no-require-ports
        	:parameters (?i - instance ?c - component)
			:task (activate ?i)
            :precondition (and (type ?i ?c)  (forall (?p - port) (not (installed-require ?c ?p))))
            :subtasks (and (start ?i ?c))
        )
		
		(:method port-is-active-and-bound
        	:parameters (?i - instance ?c - component)
			:task (activate ?i)
            :precondition (and
				(type ?i ?c)
				(forall (?p - port) (imply
					(installed-require ?c ?p)
                    (and
						(active ?p)
						(exists (?i1 - instance) (bound ?p ?i ?i1))
				))))
            :subtasks (and (start ?i ?c))
        )

		(:method port-is-active-and-unbound
        	:parameters (?i ?i1 - instance ?c ?c1 - component ?p - port)
			:task (activate ?i)
            :precondition (and
				(type ?i ?c)
				(installed-require ?c ?p)
				(active ?p)
				(not (installed ?i))
				(type ?i1 ?c1)
				(not (bound ?p ?i ?i1))
                (or (installed-provide ?c1 ?p) (running-provide ?c1 ?p))
				(or (installed ?i1) (running ?i1))
			)
            :ordered-subtasks (and (bind ?p ?i ?i1) (activate ?i))
        )

        (:method require-port-inactive
        	:parameters (?i - instance ?c ?c1 - component ?p - port)
			:task (activate ?i)
            :precondition (and (type ?i ?c) (installed-require ?c ?p) (not (active ?p)))
            :ordered-subtasks (and (activatePort ?c ?p) (activate ?i))
        )






;;;;;;;;;;;;;;;;;;;;;;;;; run-configuration

        (:method there-is-free-component-instance-run
        	:parameters (?c - component ?i - instance)
    		:task (run-configuration ?c)
            :precondition (and (type ?i ?c) (not (installed ?i)) (not (running ?i)))
            :ordered-subtasks (and
				(install ?i)
				(makeRun ?i)
			)
        )

        (:method no-free-instance-run
        	:parameters (?c - component)
    		:task (run-configuration ?c)
            :precondition ()
            :ordered-subtasks (and (createInstance ?c) (run-configuration ?c))
        )


;;;;;;;;;;;;;;;;;;;;;;;;; makeRun

        
		; there are require port which are active
        (:method port-is-active-and-bound-run
        	:parameters (?i - instance ?c - component)
    		:task (makeRun ?i)
            :precondition (and
				(type ?i ?c)
				(forall (?p - port) (imply
					(running-require ?c ?p)
                    (and
						(active ?p)
						(exists (?i1 - instance) (bound ?p ?i ?i1)
				)))))
            :subtasks (and (deactivatePort ?c ?i))
        )

        (:method port-is-active-and-unbound-run
        	:parameters (?i ?i1 - instance ?c ?c1 - component ?p - port)
    		:task (makeRun ?i)
            :precondition (and
				(type ?i ?c)
				(running-require ?c ?p)
				(active ?p)
				(installed ?i)
				(type ?i1 ?c1)
				(not (bound ?p ?i ?i1))
                (or 
					(and (installed-provide ?c1 ?p) (installed ?i1))
					(and (running-provide ?c1 ?p) (running ?i1))
				))
            :ordered-subtasks (and (bind ?p ?i ?i1) (makeRun ?i))
        )


        ; there are require ports which are inactive
        (:method require-port-inactive-run
        	:parameters (?i - instance ?c - component ?p - port)
    		:task (makeRun ?i)
            :precondition (and (type ?i ?c) (running-require ?c ?p) (not (active ?p)))
            :ordered-subtasks (and (activatePort ?c ?p) (makeRun ?i))
        )


        (:method there-are-no-require-ports-run
        	:parameters (?i - instance ?c - component)
    		:task (makeRun ?i)
            :precondition (and (type ?i ?c) (forall (?p - port) (not (running-require ?c ?p))))
            :ordered-tasks (and (deactivatePort ?c ?i))
        )

;;;;;;;;;;;;;;;;;;;;;;;;; deactivatePort

        (:method there-is-bound-port-but-needed-for-running
        	:parameters (?c - component ?i ?i1 - instance ?p - port)
    		:task (deactivatePort ?c ?i)
             :precondition (and
				(type ?i ?c)
				(installed-provide ?c ?p)
				(bound ?p ?i1 ?i)
				(installed ?i)
				(running-provide ?c ?p))
             :ordered-subtasks (and (run ?i ?c) (unbindPorts ?i))
        )


        (:method installed-provide-port-is-free
        	:parameters (?c - component ?i ?i1 - instance ?p - port)
    		:task (deactivatePort ?c ?i)
            :precondition (and
				(installed-provide ?c ?p)
				(type ?i ?c)
				(not (bound ?p ?i1 ?i))
				(installed ?i))
            :ordered-subtasks (and (run ?i ?c) (unbindPorts ?i))
        )

        (:method installed-provide-port-is-bound
        	:parameters (?c - component ?i ?i1 - instance ?p - port)
    		:task (deactivatePort ?c ?i)
            :precondition (and
				(installed-provide ?c ?p)
				(type ?i ?c)
				(bound ?p ?i1 ?i)
				(installed ?i))
            :ordered-subtasks (and (run-configuration ?c))
        )

        (:method free-to-run
        	:parameters (?c - component ?i - instance)
    		:task (deactivatePort ?c ?i)
            :precondition ()
            :ordered-subtasks (and (run ?i ?c) (unbindPorts ?i))
        )


;;;;;;;;;;;;;;;;;;;;;;;;; unbindPorts
        (:method there-is-bound-port-but-needed-for-running-unbind
        	:parameters (?i ?i1 - instance ?c - component ?p - port)
    		:task (unbindPorts ?i)
             :precondition (and
				(type ?i ?c)
				(installed-require ?c ?p)
				(bound ?p ?i ?i1)
				(running-require ?c ?p))
             :ordered-subtasks (and )
        )

        (:method there-is-bound-port-unbind
        	:parameters (?i ?i1 - instance ?c - component ?p - port)
    		:task (unbindPorts ?i)
            :precondition (and
				(type ?i ?c)
				(installed-require ?c ?p)
				(bound ?p ?i ?i1))
            :ordered-subtasks (and (unbind ?p ?i ?i1) (unbindPorts ?i))
        )

        (:method do-nothing-unbind
        	:parameters (?i - instance)
    		:task (unbindPorts ?i)
            :precondition ()
            :ordered-subtasks ()
        )


;;;;;;;;;;;;;;;;;;;;;;;;; activatePort
        
		(:method port-is-inactive-and-there-is-provide-port-in-active-state-of-some-component
        	:parameters (?c ?c1 - component ?p - port)
			:task (activatePort ?c ?p)
            :precondition (and (installed-provide ?c1 ?p) (not (= ?c ?c1)))
            :subtasks (and (install-configuration ?c1))
        )

        (:method port-is-inactive-and-there-is-provide-port-in-running-state-of-some-component
        	:parameters (?c ?c1 - component ?p - port)
			:task (activatePort ?c ?p)
            :precondition (and (running-provide ?c1 ?p))
            :subtasks (and (run-configuration ?c1))
        )


;;;;;;;;;;;;;;;;;;;;;;;;; createInstance
	(:method do_instance_creation
		:parameters (?c - component ?newI ?nextI - instance)
		:task (createInstance ?c)
		:subtasks (and (createNewInstance ?newI ?nextI ?c))
	)


;;;;;;;;;;;;;;;;;;;;;;;;; actions
	(:action createNewInstance
	    :parameters (?newI ?nextI - instance ?c - component)
		:precondition (and (currentNextInstance ?newI) (next ?newI ?nextI))
		:effect (and (not (currentNextInstance ?newI)) (currentNextInstance ?nextI)
					(type ?newI ?c)
				)
	)



    (:action start
	    :parameters (?i - instance ?c - component)
	    :precondition (and (type ?i ?c) (not (installed ?i)))
	    :effect (and (installed ?i) (forall (?p - port)
	                                        (when (installed-provide ?c ?p)
	                                              (active ?p)
	                                        )
	                                 )
	            )
    )
    

	(:action run
    	:parameters (?i - instance ?c - component)
    	:precondition (and (type ?i ?c) (not (running ?i)) (installed ?i))
    	:effect (and (running ?i)
			(forall (?p - port)
				(when (running-provide ?c ?p)
					(active ?p)))
    	    (forall (?p - port)
				(when (installed-provide ?c ?p)
					(not (active ?p)))))
    )


    (:action bind
        :parameters (?p - port ?i1 ?i2 - instance)
        :precondition ()
        :effect (and (bound ?p ?i1 ?i2))
    )

    (:action unbind
       :parameters (?p - port ?i1 ?i2 - instance)
       :precondition()
       :effect (not (bound ?p ?i1 ?i2))
    )


)
