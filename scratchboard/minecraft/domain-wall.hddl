(define (domain minecraft)
  (:requirements :typing)

  (:types
      location blocktype direction numbers - object

  )

  (:predicates
     (empty ?location - location)
     (blockat ?location - location ?t - blocktype)
     (neighbour ?loc1 ?loc2 - location ?dir - direction)
     (on-top ?loc1 ?loc2 - location)
     (isone ?z - numbers)
     (prev ?z ?z2 - numbers)
  )
  
  (:task buildwall :parameters (?loc1 - location ?len ?hgt - numbers ?d - direction ?t - blocktype))
  (:task buildrow :parameters (?loc1 - location ?len - numbers ?d - direction ?t - blocktype))
  (:task placeblockabstract :parameters (?loc1 - location ?t - blocktype))
  

  (:method build-wall-1
    :parameters (?loc1 - location ?len ?hgt - numbers ?d - direction ?t - blocktype)
    :task (buildwall ?loc1 ?len ?hgt ?d ?t)
    :precondition (and (isone ?hgt) )
    :subtasks (and 
        (buildrow ?loc1 ?len ?d ?t)
      )
  )

  (:method build-wall-2
    :parameters (?loc1 ?loc2 - location ?len ?hgt ?hgt2 - numbers ?d - direction ?t - blocktype)
    :task (buildwall ?loc1 ?len ?hgt ?d ?t)
    :precondition (and (not(isone ?hgt)) (prev ?hgt ?hgt2) (on-top ?loc1 ?loc2) )
    :ordered-subtasks (and 
        (buildrow ?loc1 ?len ?d ?t)
        (buildwall ?loc2 ?len ?hgt2 ?d ?t)
      )
  )

  (:method build-row-1
    :parameters (?loc1 - location ?len - numbers ?d - direction ?t - blocktype)
    :task (buildrow ?loc1 ?len ?d ?t)
    :precondition (and (isone ?len) )
    :subtasks (and 
        (placeblockabstract ?loc1 ?t)
      )
  )

  (:method build-row-2
    :parameters (?loc1 ?loc2 - location ?len ?len2 - numbers ?d - direction ?t - blocktype)
    :task (buildrow ?loc1 ?len ?d ?t)
    :precondition (and (not(isone ?len)) (prev ?len ?len2) (neighbour ?loc1 ?loc2 ?d) )
    :ordered-subtasks (and 
        (placeblockabstract ?loc1 ?t)
        (buildrow ?loc2 ?len2 ?d ?t)
      )
  )

  (:method build-row-3
    :parameters (?loc1 ?loc2 - location ?len ?len2 - numbers ?d - direction ?t - blocktype)
    :task (buildrow ?loc1 ?len ?d ?t)
    :precondition (and (not(isone ?len)) (prev ?len ?len2) (neighbour ?loc1 ?loc2 ?d) )
    :ordered-subtasks (and 
        (buildrow ?loc2 ?len2 ?d ?t)
        (placeblockabstract ?loc1 ?t)
      )
  )

  (:method placeblockabstract-1
    :parameters (?loc1 - location ?t - blocktype)
    :task (placeblockabstract ?loc1 ?t)
    :precondition (and (empty ?loc1))
    :subtasks (and 
        (placeblock ?loc1 ?t)
      )
  )

  (:method placeblockabstract-2
    :parameters (?loc1 - location ?t - blocktype)
    :task (placeblockabstract ?loc1 ?t)
    :precondition (and (blockat ?loc1 ?t))
    :subtasks ()
  )  

  (:method placeblockabstract-3
    :parameters (?loc1 - location ?t ?t2 - blocktype)
    :task (placeblockabstract ?loc1 ?t)
    :precondition (and (blockat ?loc1 ?t2) )
    :subtasks (and 
        (removeblock ?loc1 ?t2)
        (placeblock ?loc1 ?t)
      )
  )
  
  (:action placeblock
    :parameters (?location - location ?t - blocktype)
    :precondition (and (empty ?location) )
    :effect (and (not (empty ?location)) (blockat ?location ?t)) )

  (:action removeblock
    :parameters (?location - location ?t - blocktype)
    :precondition (and (not(empty ?location)) )
    :effect (and (empty ?location) (not(blockat ?location ?t))) )

)