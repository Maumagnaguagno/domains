# Abstraction rules:

AdjacentCity(city1, city2) forall city1, city2, airport1, airport2 \
    if City(city1) and City(city2) and \
       Airport(airport1) and Airport(airport2) and \
       InCity(airport1, city1) and InCity(airport2, city2) and \
       Connected(airport1, airport2)

# Tasks definitions:

task Load(carrier, package, location, city):
    precond:
        Package(package) and Location(location) and Carrier(carrier)
        At(carrier, location) and At(package, location)
        InCity(location, city)
    add:
        Inside(package, carrier)
    delete:
        At(package, location)
        AtCity(package, city)
    cost:
        LoadCost

task Unload(carrier, package, location, city):
    precond:
        Package(package) and Location(location) and Carrier(carrier)
        At(carrier, location) and Inside(package, carrier)
        InCity(location, city)
    add:
        At(package, location)
        AtCity(package, city)
    delete:
        Inside(package, carrier)
    cost:
        UnloadCost

task Drive(truck, location1, location2, city):
    precond:
        Truck(truck) and Location(location1) and Location(location1)
        City(city) and InCity(location1, city) and InCity(location2, city)
        Adjacent(location1, location2)
        At(truck, location1)
    add:
        At(truck, location2)
    delete:
        At(truck, location1)
    cost:
        DriveCost

task Fly(airplane, airport1, airport2, city1, city2):
    precond:
        Airplane(airplane) and Airport(airport1) and Airport(airport2)
        Connected(airport1, airport2) and At(airplane, airport1)
        InCity(airport1, city1) and InCity(airport2, city2)
    add:
        At(airplane, airport2)
        AtCity(airplane, city2)
    delete:
        At(airplane, airport1)
        AtCity(airplane, city1)
    cost:
        FlyCost

task AchieveTruckAt(truck, location, city, depth):
    precond:
        Truck(truck) and Location(location) and City(city)
        InCity(location, city) and AtCity(truck, city)
    add:
        At(truck, location)
    delete:
        At(truck, location') forall location' \
            if At(truck, location') and (location' != location)
    method:
        precond:
            At(truck, location)
    method location1, location2:
        precond:
            At(truck, location1) and (location1 != location)
            Adjacent(location1, location2)
            InCity(location1, city) and InCity(location2, city)
            depth < MaxLocationDistance
        subtasks:
            Drive(truck, location1, location2, city)
            AchieveTruckAt(truck, location, city, depth + 1)
    optimistic:
        0
    pessimistic:
        (MaxLocationDistance - depth) * (DriveCost + Epsilon)
    level:
        1

task Pickup(truck, package, location, city):
    precond:
        Truck(truck) and Location(location) and Package(package) and City(city)
        InCity(location, city)
        AtCity(truck, city) and At(package, location)
    add:
        At(truck, location)
        Inside(package, truck)
    delete:
        At(package, location)
        At(truck, location') forall location' \
            if At(truck, location') and (location' != location)
    method:
        subtasks:
            AchieveTruckAt(truck, location, city, 0)
            Load(truck, package, location, city)
    optimistic:
        LoadCost
    pessimistic:
        MaxLocationDistance * (DriveCost + Epsilon) + \
        LoadCost + Epsilon
    level:
        2

task Deliver(truck, package, location, city):
    precond:
        Truck(truck) and Location(location) and Package(package) and City(city)
        InCity(location, city) and AtCity(truck, city) and Inside(package, truck)
    add:
        At(truck, location)
        At(package, location)
    delete:
        Inside(package, truck)
        At(truck, location') forall location' \
            if At(truck, location') and (location' != location)
    method:
        subtasks:
            AchieveTruckAt(truck, location, city, 0)
            Unload(truck, package, location, city)
    optimistic:
        UnloadCost
    pessimistic:
        MaxLocationDistance * (DriveCost + Epsilon) + \
        UnloadCost + Epsilon
    level:
        2

task AchieveInCityAt(package, city, location):
    precond:
        Package(package) and City(city) and Location(location)
        InCity(location, city) and AtCity(package, city)
    add:
        At(package, location)
    delete:
        At(package, location') forall location' \
            if At(package, location') and (location' != location)
    abstract:
        At(truck, location') forall truck, location' \
            if Truck(truck) and AtCity(truck, city) and InCity(location', city)
    method:
        precond:
            At(package, location)
    method location', truck:
        precond:
            At(package, location') and (location' != location)
            Truck(truck) and AtCity(truck, city)
        subtasks:
            Pickup(truck, package, location', city)
            Deliver(truck, package, location, city)
    optimistic:
        0
    pessimistic:
        2 * MaxLocationDistance * (DriveCost + Epsilon) + \
        LoadCost + UnloadCost + 3 * Epsilon
    level:
        3

task LoadAtCity(airplane, package, city):
    precond:
        Package(package) and City(city) and Airplane(airplane)
        AtCity(airplane, city) and AtCity(package, city)
    add:
        Inside(package, airplane)
    delete:
        AtCity(package, city)
        At(package, location) forall location if At(package, location)
    abstract:
        At(truck, location) forall truck, location \
            if Truck(truck) and AtCity(truck, city) and InCity(location, city)
    method airport:
        precond:
            At(airplane, airport)
        subtasks:
            AchieveInCityAt(package, city, airport)
            Load(airplane, package, airport, city)
    optimistic:
        LoadCost
    pessimistic:
        2 * MaxLocationDistance * (DriveCost + Epsilon) + \
        2 * LoadCost + UnloadCost + 4 * Epsilon
    level:
        4

task UnloadAtCity(airplane, package, city):
    precond:
        Package(package) and City(city) and Airplane(airplane)
        Inside(package, airplane) and AtCity(airplane, city)
    add:
        AtCity(package, city)
        At(package, airport) forall airport if At(airplane, airport)
    delete:
        Inside(package, airplane)
    method airport:
        precond:
            At(airplane, airport)
        subtasks:
            Unload(airplane, package, airport, city)
    optimistic:
        UnloadCost
    pessimistic:
        UnloadCost + Epsilon
    level:
        4

task FlyToCity(airplane, city1, city2):
    precond:
        Airplane(airplane) and City(city1) and City(city2)
        AdjacentCity(city1, city2) and AtCity(airplane, city1)
    add:
        AtCity(airplane, city2)
    delete:
        AtCity(airplane, city1)
        At(airplane, airport) forall airport if At(airplane, airport)
    abstract:
        At(airplane, airport) forall airport \
            if Airport(airport) and InCity(airport, city2)
    method airport1, airport2:
        precond:
            At(airplane, airport1) and Airport(airport2)
            InCity(airport2, city2)
        subtasks:
            Fly(airplane, airport1, airport2, city1, city2)
    optimistic:
        FlyCost
    pessimistic:
        FlyCost + Epsilon
    level:
        4

task AchieveAirplaneAtCity(airplane, city, depth):
    precond:
        Airplane(airplane) and City(city)
    add:
        AtCity(airplane, city)
    delete:
        At(airplane, airport) forall airport \
            if At(airplane, airport) and not InCity(airport, city)
        AtCity(airplane, city') forall city' \
            if AtCity(airplane, city') and city' != city
    abstract:
        At(airplane, airport) forall airport \
            if Airport(airport) and InCity(airport, city)
    method:
        precond:
            AtCity(airplane, city)
    method city1, city2:
        precond:
            AtCity(airplane, city1) and city1 != city
            AdjacentCity(city1, city2)
            depth < MaxCityDistance
        subtasks:
            FlyToCity(airplane, city1, city2)
            AchieveAirplaneAtCity(airplane, city, depth + 1)
    optimistic:
        0
    pessimistic:
        (MaxCityDistance - depth) * (FlyCost + 2 * Epsilon)
    level:
        5

task PickupAtCity(airplane, package, city):
    precond:
        Airplane(airplane) and Package(package) and City(city)
        AtCity(package, city)
    add:
        AtCity(airplane, city)
        Inside(package, airplane)
    delete:
        AtCity(package, city)
        At(package, location) forall location \
            if At(package, location) and InCity(location, city)
        At(airplane, airport) forall airport \
            if At(airplane, airport) and not InCity(airport, city)
        AtCity(airplane, city') forall city' \
            if AtCity(airplane, city') and city' != city
    abstract:
        At(truck, location) forall truck, location \
            if AtCity(truck, city) and InCity(location, city)
    method:
        subtasks:
            AchieveAirplaneAtCity(airplane, city, 0)
            LoadAtCity(airplane, package, city)
    optimistic:
        LoadCost
    pessimistic:
        MaxCityDistance * (FlyCost + 2 * Epsilon) + \
        2 * MaxLocationDistance * (DriveCost + Epsilon) + \
        2 * LoadCost + UnloadCost + 5 * Epsilon
    level:
        6

task DeliverToCity(airplane, package, city):
    precond:
        Airplane(airplane) and Package(package) and City(city)
        Inside(package, airplane)
    add:
        AtCity(airplane, city)
        AtCity(package, city)
    delete:
        Inside(package, airplane)
        At(airplane, airport) forall airport \
            if At(airplane, airport) and not InCity(airport, city)
        AtCity(airplane, city') forall city' \
            if AtCity(airplane, city') and city' != city
    abstract:
        At(airplane, airport) forall airport \
            if Airport(airport) and InCity(airport, city)
        At(package, airport) forall airport \
            if Airport(airport) and InCity(airport, city)
    method:
        subtasks:
            AchieveAirplaneAtCity(airplane, city, 0)
            UnloadAtCity(airplane, package, city)
    optimistic:
        UnloadCost
    pessimistic:
        MaxCityDistance * (FlyCost + 2 * Epsilon) + \
        UnloadCost + 2 * Epsilon
    level:
        6

task AchieveAtCity(package, city):
    add:
        AtCity(package, city)
    delete:
        At(package, location) forall location \
            if At(package, location) and not InCity(location, city)
        AtCity(package, city') forall city' \
            if AtCity(package, city') and city' != city
    abstract:
        At(airport, city) forall airport \
            if not AtCity(package, city) and InCity(airport, city)
        At(truck, location) forall truck, city', location \
            if AtCity(package, city') and (city' != city) and \
               AtCity(truck, city') and InCity(location, city')
        At(airplane, airport) forall airplane, airport \
            if Airplane(airplane) and Airport(airport)
        AtCity(airplane, city') forall airplane, city' \
            if Airplane(airplane) and City(city')
    method:
        precond:
            AtCity(package, city)
    method airplane, city':
        precond:
            Airplane(airplane) and AtCity(package, city') and city' != city
        subtasks:
            PickupAtCity(airplane, package, city')
            DeliverToCity(airplane, package, city)
    optimistic:
        0
    pessimistic:
        2 * MaxCityDistance * (FlyCost + 2 * Epsilon) + \
        2 * MaxLocationDistance * (DriveCost + Epsilon) + \
        2 * LoadCost +  2 * UnloadCost + 8 * Epsilon
    level:
        7

task AchieveAt(package, location):
    add:
        At(package, location)
    delete:
        At(package, location') forall location' if \
            At(package, location') and location' != location
    abstract:
        At(truck, location') forall truck, city, location' \
            if Truck(truck) and AtCity(truck, city) and InCity(location', city)
        At(airplane, airport) forall airplane, airport \
            if Airplane(airplane) and Airport(airport)
        AtCity(airplane, city) forall airplane, city \
            if Airplane(airplane) and City(city)
    method city:
        precond:
            InCity(location, city)
        subtasks:
            AchieveAtCity(package, city)
            AchieveInCityAt(package, city, location)
    optimistic:
        0
    pessimistic:
        2 * MaxCityDistance * (FlyCost + 2 * Epsilon) + \
        4 * MaxLocationDistance * (DriveCost + Epsilon) + \
        3 * LoadCost +  3 * UnloadCost + 12 * Epsilon
    level:
        8
