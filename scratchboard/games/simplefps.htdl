# Derivation rules.

AtMedikit(area) forall area \
    if Area(area) and \
        exists medikit:
            Medikit(medikit) and PointOfInterest(medikit, area)

AtKnife(area) forall area \
    if Area(area) and \
        exists knife:
            Knife(knife) and PointOfInterest(knife, area)

AtAmmo(area) forall area \
    if Area(area) and \
        exists ammo:
            Ammo(ammo) and PointOfInterest(ammo, area)

AtGun(area) forall area \
    if Area(area) and \
        exists gun:
            Gun(gun) and PointOfInterest(gun, area)

AtGunWithNightvision(area) forall area \
    if Area(area) and \
        exists gun:
            HasNightvision(gun) and PointOfInterest(gun, area)

AtLoadedGun(area) forall area \
    if Area(area) and \
        exists gun:
            Loaded(gun) and PointOfInterest(gun, area)

AtLoadedGunWithNightvision(area) forall area \
    if Area(area) and \
        exists gun:
            HasNightvision(gun) and Loaded(gun) and PointOfInterest(gun, area)

AtTool(area) forall area \
    if Area(area) and \
        exists tool:
            Tool(tool) and PointOfInterest(tool, area)

AtCoverpoint(area) forall area \
    if Area(area) and \
        exists coverpoint:
            Coverpoint(coverpoint) and PointOfInterest(coverpoint, area)

HoldingMedikit if exists medikit: Medikit(medikit) and Holding(medikit)

HoldingKnife if exists knife: Knife(knife) and Holding(knife)

HoldingAmmo if exists ammo: Ammo(ammo) and Holding(ammo)

HoldingGun if exists gun: Gun(gun) and Holding(gun)

HoldingGunWithNightvision if exists gun: HasNightvision(gun) and Holding(gun)

HoldingLoadedGun if exists gun: Loaded(gun) and Holding(gun)

HoldingLoadedGunWithNightvision \
    if exists gun: HasNightvision(gun) and Loaded(gun) and Holding(gun)

HoldingTool if exists tool: Tool(tool) and Holding(tool)

# Primitive tasks.

task MoveToPoint(point, area):
    precond:
        Area(area) and PointOfInterest(point, area)
        NotCloseToPoint and not Covered
    add:
        CloseTo(point)
    delete:
        NotCloseToPoint
    cost:
        MoveToPointCost

task MoveToPointFromPoint(point1, point2, area):
    precond:
        Area(area)
        PointOfInterest(point1, area) and PointOfInterest(point2, area)
        CloseTo(point1) and not Covered
    add:
        CloseTo(point2)
    delete:
        CloseTo(point1)
    cost:
        MoveToPointCost

task Move(area1, area2, waypoint):
    precond:
        Area(area1) and Area(area2) and Waypoint(waypoint)
        Open(waypoint) and  Connected(area1, area2, waypoint)
        (not Covered) and CloseTo(waypoint)
    add:
        At(area2)
        NotCloseToPoint
    delete:
        CloseTo(waypoint)
        At(area1)
    cost:
        MoveCost

task TakeCover(coverpoint, area):
    precond:
        Coverpoint(coverpoint) and Area(area)
        PointOfInterest(coverpoint, area) and CloseTo(coverpoint)
        not Covered
    add:
        Covered
    cost:
        TakeCoverCost

task Uncover:
    precond:
        Covered
    delete:
        Covered
    cost:
        UncoverCost

task MakeAccessible(area1, area2, waypoint, tool):
    precond:
        Waypoint(waypoint) and Tool(tool) and Holding(tool)
        Connected(area1, area2, waypoint) and not Open(waypoint)
        CloseTo(waypoint)
    add:
        Open(waypoint)
    cost:
        MakeAccessibleCost

task PlaceInInventory(item, area):
    precond:
        Item(item) and Area(area)
        PointOfInterest(item, area) and CloseTo(item)
        (not Covered) and Lighted(area)
    add:
        Holding(item)
        NotCloseToPoint
    delete:
        PointOfInterest(item, area)
        CloseTo(item)
    cost:
        PlaceInInventoryCost

task Reload(gun, ammo):
    precond:
        Gun(gun) and Ammo(ammo)
        not Loaded(gun) and Holding(ammo) and Holding(gun)
    add:
        Loaded(gun)
    delete:
        Holding(ammo)
    cost:
        ReloadCost

task TurnLightOn(area, controlbox):
    precond:
        Area(area) and Controlbox(controlbox)
        CloseTo(controlbox)
        PointOfInterest(controlbox, area) and not Lighted(area)
    add:
        Lighted(area)
    cost:
        TurnLightOnCost

task TurnLightOff(area, controlbox):
    precond:
        Area(area) and Controlbox(controlbox)
        CloseTo(controlbox)
        PointOfInterest(controlbox, area) and Lighted(area)
    delete:
        Lighted(area)
    cost:
        TurnLightOffCost

task UseMedikit(medikit):
    precond:
        Medikit(medikit) and Holding(medikit) and Injured
    delete:
        Injured
        Holding(medikit)
    cost:
        UseMedikitCost

task AttackMelee(knife, player, area):
    precond:
        At(area) and PointOfInterest(player, area) and Lighted(area)
        Holding(knife) and Knife(knife)
        CloseTo(player) and Player(player)
        not Covered
    add:
        Wounded(player)
    cost:
        AttackMeleeCost

task AttackRanged(gun, player, area):
    precond:
        Lighted(area) and At(area)
        PointOfInterest(player, area) and Player(player)
        Gun(gun) and Loaded(gun) and Holding(gun)
        not Covered
    add:
        Wounded(player)
    delete:
        Loaded(gun)
    cost:
        AttackRangedCost

task AttackRangedFromCover(gun, player, area):
    precond:
        Lighted(area) and At(area)
        PointOfInterest(player, area) and Player(player)
        Gun(gun) and Loaded(gun) and Holding(gun)
        Covered
    add:
        Wounded(player)
    delete:
        Loaded(gun)
    cost:
        AttackRangedFromCoverCost

task SneakKill(gun, player, area):
    precond:
        At(area) and PointOfInterest(player, area)
        Player(player) and Holding(gun)
        HasNightvision(gun) and Loaded(gun)
        not Lighted(area) and (not Covered)
    add:
        Wounded(player)
    delete:
        Loaded(gun)
    cost:
        SneakKillCost

task SneakKillFromCover(gun, player, area):
    precond:
        At(area) and PointOfInterest(player, area)
        Player(player) and Holding(gun)
        HasNightvision(gun) and Loaded(gun)
        not Lighted(area) and Covered
    add:
        Wounded(player)
    delete:
        Loaded(gun)
    cost:
        SneakKillFromCoverCost

# High-level actions:

task AchieveCloseTo(point, area):
    precond:
        At(area) and not Covered
    add:
        CloseTo(point)
    delete:
        NotCloseToPoint
        CloseTo(point') forall point' if CloseTo(point') and point' != point
    method:
        precond:
            CloseTo(point)
    method:
        precond:
            NotCloseToPoint
        subtasks:
            MoveToPoint(point, area)
    method point':
        precond:
            CloseTo(point') and point' != point
        subtasks:
            MoveToPointFromPoint(point', point, area)
    optimistic:
        0
    pessimistic:
        MoveToPointCost + Epsilon
    level:
        1

task TakeCover(area):
    precond:
        At(area) and AtCoverpoint(area) and not Covered
    add:
        Covered
    delete:
        NotCloseToPoint
        CloseTo(point) forall point \
            if PointOfInterest(point, area) and not Coverpoint(point)
    abstract:
        CloseTo(coverpoint) forall coverpoint \
            if PointOfInterest(coverpoint, area) and Coverpoint(coverpoint)
    method coverpoint:
        precond:
            PointOfInterest(coverpoint, area) and Coverpoint(coverpoint)
        subtasks:
            AchieveCloseTo(coverpoint, area)
            TakeCover(coverpoint, area)
    optimistic:
        TakeCoverCost
    pessimistic:
        MoveToPointCost + TakeCoverCost + 2 * Epsilon
    level:
        2

task TurnLightOn(area):
    precond:
        Area(area) and not Lighted(area)
    add:
        Lighted(area)
    delete:
        NotCloseToPoint
        CloseTo(controlbox) forall controlbox \
            if PointOfInterest(controlbox, area) and not Controlbox(controlbox)
    abstract:
        CloseTo(controlbox) forall controlbox \
            if PointOfInterest(controlbox, area) and Controlbox(controlbox)
    method controlbox:
        precond:
            Controlbox(controlbox) and PointOfInterest(controlbox, area)
        subtasks:
            AchieveCloseTo(controlbox, area)
            TurnLightOn(area, controlbox)
    optimistic:
        TurnLightOnCost
    pessimistic:
        MoveToPointCost + TurnLightOnCost + 2 * Epsilon
    level:
        2

task TurnLightOff(area):
    precond:
        Area(area) and Lighted(area)
    delete:
        Lighted(area)
        NotCloseToPoint
        CloseTo(controlbox) forall controlbox \
            if PointOfInterest(controlbox, area) and not Controlbox(controlbox)
    abstract:
        CloseTo(controlbox) forall controlbox \
            if PointOfInterest(controlbox, area) and Controlbox(controlbox)
    method controlbox:
        precond:
            Controlbox(controlbox) and PointOfInterest(controlbox, area)
        subtasks:
            AchieveCloseTo(controlbox, area)
            TurnLightOff(area, controlbox)
    optimistic:
        TurnLightOffCost
    pessimistic:
        MoveToPointCost + TurnLightOffCost  + 2 * Epsilon
    level:
        2

task UseMedikit:
    precond:
        HoldingMedikit and Injured
    delete:
        Injured
    abstract:
    	HoldingMedikit
    method medikit:
        precond:
            Medikit(medikit) and Holding(medikit)
        subtasks:
            UseMedikit(medikit)
    optimistic:
        UseMedikitCost
    pessimistic:
        UseMedikitCost + Epsilon
    level:
        2

task ReloadGun:
    precond:
        HoldingGun and HoldingAmmo
    add:
        HoldingLoadedGun
    abstract:
        Holding(ammo) forall ammo if Ammo(ammo) and Holding(ammo)
        Loaded(gun) forall gun if Gun(gun) and Holding(gun)
    method gun, ammo:
        precond:
            Gun(gun) and Ammo(ammo)
            Holding(gun) and Holding(ammo)
        subtasks:
            Reload(gun, ammo)
    optimistic:
        ReloadCost
    pessimistic:
        ReloadCost + Epsilon
    level:
        2

task ReloadGunWithNightvision:
    precond:
        HoldingGunWithNightvision and HoldingAmmo
    add:
        HoldingLoadedGunWithNightvision
    abstract:
        Holding(ammo) forall ammo if Ammo(ammo) and Holding(ammo)
        Loaded(gun) forall gun if HasNightvision(gun) and Holding(gun)
    method gun, ammo:
        precond:
            HasNightvision(gun) and Ammo(ammo)
            Holding(gun) and Holding(ammo)
        subtasks:
            Reload(gun, ammo)
    optimistic:
        ReloadCost
    pessimistic:
        ReloadCost + Epsilon
    level:
        2

task MakeAccessible(area1, area2, waypoint):
    precond:
        HoldingTool and Connected(area1, area2, waypoint)
        not Open(waypoint)
        CloseTo(waypoint)
    add:
        Open(waypoint)
    method tool:
        precond:
            Tool(tool) and Holding(tool)
        subtasks:
            MakeAccessible(area1, area2, waypoint, tool)
    optimistic:
        MakeAccessibleCost
    pessimistic:
        MakeAccessibleCost + Epsilon
    level:
        2

task AttackMelee(player, area):
    precond:
        Player(player) and At(area) and PointOfInterest(player, area)
        HoldingKnife and Lighted(area) and not Covered
    add:
        Wounded(player)
        CloseTo(player)
    delete:
        NotCloseToPoint
    abstract:
        CloseTo(poi) forall poi if PointOfInterest(poi, area) and poi != player
    method knife:
        precond:
            Knife(knife) and Holding(knife)
        subtasks:
            AchieveCloseTo(player, area)
            AttackMelee(knife, player, area)
    optimistic:
        AttackMeleeCost
    pessimistic:
        MoveToPointCost + AttackMeleeCost + 2 * Epsilon
    level:
        2

task AttackRanged(player, area):
    precond:
        Player(player) and At(area) and PointOfInterest(player, area)
        HoldingLoadedGun and Lighted(area) and not Covered
    add:
        Wounded(player)
    abstract:
        Loaded(gun) forall gun if Gun(gun) and Holding(gun)
    method gun:
        precond:
            Gun(gun) and Holding(gun) and Loaded(gun)
        subtasks:
            AttackRanged(gun, player, area)
    optimistic:
        AttackRangedCost
    pessimistic:
        AttackRangedCost + Epsilon
    level:
        2

task AttackRangedFromCover(player, area):
    precond:
        Player(player) and At(area) and PointOfInterest(player, area)
        HoldingLoadedGun and Lighted(area) and Covered
    add:
        Wounded(player)
    abstract:
        Loaded(gun) forall gun if Gun(gun) and Holding(gun)
    method gun:
        precond:
            Gun(gun) and Holding(gun) and Loaded(gun)
        subtasks:
            AttackRangedFromCover(gun, player, area)
    optimistic:
        AttackRangedFromCoverCost
    pessimistic:
        AttackRangedFromCoverCost + Epsilon
    level:
        2

task SneakKill(player, area):
    precond:
        Player(player) and At(area) and PointOfInterest(player, area)
        HoldingLoadedGunWithNightvision and not Lighted(area) and not Covered
    add:
        Wounded(player)
    abstract:
        Loaded(gun) forall gun if HasNightvision(gun) and Holding(gun)
    method gun:
        precond:
            HasNightvision(gun) and Holding(gun) and Loaded(gun)
        subtasks:
            SneakKill(gun, player, area)
    optimistic:
        SneakKillCost
    pessimistic:
        SneakKillCost + Epsilon
    level:
        2

task SneakKillFromCover(player, area):
    precond:
        Player(player) and At(area) and PointOfInterest(player, area)
        HoldingLoadedGunWithNightvision and not Lighted(area) and Covered
    add:
        Wounded(player)
    abstract:
        Loaded(gun) forall gun if HasNightvision(gun) and Holding(gun)
    method gun:
        precond:
            HasNightvision(gun) and Holding(gun) and Loaded(gun)
        subtasks:
            SneakKillFromCover(gun, player, area)
    optimistic:
        SneakKillFromCoverCost
    pessimistic:
        SneakKillFromCoverCost + Epsilon
    level:
        2

task PlaceMedikitInInventory(area):
    precond:
        AtMedikit(area) and At(area) and not Covered
    add:
        HoldingMedikit
    abstract:
        PointOfInterest(medikit, area) forall medikit \
            if Medikit(medikit) and PointOfInterest(medikit, area)
        Holding(medikit) forall medikit \
            if Medikit(medikit) and PointOfInterest(medikit, area)
    method medikit:
        precond:
            Medikit(medikit) and PointOfInterest(medikit, area)
        subtasks:
            AchieveCloseTo(medikit, area)
            PlaceInInventory(medikit, area)
    optimistic:
        PlaceInInventoryCost
    pessimistic:
        MoveToPointCost + PlaceInInventoryCost + 2 * Epsilon
    level:
        2

task PlaceAmmoInInventory(area):
    precond:
        AtAmmo(area) and At(area) and not Covered
    add:
        HoldingAmmo
    abstract:
        PointOfInterest(ammo, area) forall ammo \
            if Ammo(ammo) and PointOfInterest(ammo, area)
        Holding(ammo) forall ammo \
            if Ammo(ammo) and PointOfInterest(ammo, area)
    method ammo:
        precond:
            Ammo(ammo) and PointOfInterest(ammo, area)
        subtasks:
            AchieveCloseTo(ammo, area)
            PlaceInInventory(ammo, area)
    optimistic:
        PlaceInInventoryCost
    pessimistic:
        MoveToPointCost + PlaceInInventoryCost + 2 * Epsilon
    level:
        2

task PlaceKnifeInInventory(area):
    precond:
        AtKnife(area) and At(area) and not Covered
    add:
        HoldingKnife
    abstract:
        PointOfInterest(knife, area) forall knife \
            if Knife(knife) and PointOfInterest(knife, area)
        Holding(knife) forall knife \
            if Knife(knife) and PointOfInterest(knife, area)
    method knife:
        precond:
            Knife(knife) and PointOfInterest(knife, area)
        subtasks:
            AchieveCloseTo(knife, area)
            PlaceInInventory(knife, area)
    optimistic:
        PlaceInInventoryCost
    pessimistic:
        MoveToPointCost + PlaceInInventoryCost + 2 * Epsilon
    level:
        2

task PlaceGunInInventory(area):
    precond:
        AtGun(area) and At(area) and not Covered
    add:
        HoldingGun
    abstract:
        PointOfInterest(gun, area) forall gun \
            if Gun(gun) and PointOfInterest(gun, area)
        Holding(gun) forall gun \
            if Gun(gun) and PointOfInterest(gun, area)
    method gun:
        precond:
            Gun(gun) and PointOfInterest(gun, area)
        subtasks:
            AchieveCloseTo(gun, area)
            PlaceInInventory(gun, area)
    optimistic:
        PlaceInInventoryCost
    pessimistic:
        MoveToPointCost + PlaceInInventoryCost + 2 * Epsilon
    level:
        2

task PlaceToolInInventory(area):
    precond:
        AtTool(area) and At(area) and not Covered
    add:
        HoldingTool
    abstract:
        PointOfInterest(tool, area) forall tool \
            if Tool(tool) and PointOfInterest(tool, area)
        Holding(tool) forall tool \
            if Tool(tool) and PointOfInterest(tool, area)
    method tool:
        precond:
            Tool(tool) and PointOfInterest(tool, area)
        subtasks:
            AchieveCloseTo(tool, area)
            PlaceInInventory(tool, area)
    optimistic:
        PlaceInInventoryCost
    pessimistic:
        MoveToPointCost + PlaceInInventoryCost + 2 * Epsilon
    level:
        2

task PlaceGunWithNightvisionInInventory(area):
    precond:
        AtGunWithNightvision(area) and At(area) and not Covered
    add:
        HoldingGunWithNightvision
    abstract:
        PointOfInterest(gun, area) forall gun \
            if HasNightvision(gun) and PointOfInterest(gun, area)
        Holding(gun) forall gun \
            if HasNightvision(gun) and PointOfInterest(gun, area)
    method gun:
        precond:
            HasNightvision(gun) and PointOfInterest(gun, area)
        subtasks:
            AchieveCloseTo(gun, area)
            PlaceInInventory(gun, area)
    optimistic:
        PlaceInInventoryCost
    pessimistic:
        MoveToPointCost + PlaceInInventoryCost + 2 * Epsilon
    level:
        2

task PlaceLoadedGunInInventory(area):
    precond:
        AtLoadedGun(area) and At(area) and not Covered
    add:
        HoldingLoadingGun
    abstract:
        PointOfInterest(gun, area) forall gun \
            if Loaded(gun) and PointOfInterest(gun, area)
        Holding(gun) forall gun \
            if Loaded(gun) and PointOfInterest(gun, area)
    method gun:
        precond:
            Loaded(gun) and PointOfInterest(gun, area)
        subtasks:
            AchieveCloseTo(gun, area)
            PlaceInInventory(gun, area)
    optimistic:
        PlaceInInventoryCost
    pessimistic:
        MoveToPointCost + PlaceInInventoryCost + 2 * Epsilon
    level:
        2

task PlaceLoadedGunWithNightvisionInInventory(area):
    precond:
        AtLoadedGunWithNightvision(area) and At(area) and not Covered
    add:
        HoldingLoadedGunWithNightvision
    abstract:
        PointOfInterest(gun, area) forall gun \
            if HasNightvision(gun) and Loaded(gun) and \
                PointOfInterest(gun, area)
        Holding(gun) forall gun \
            if HasNightvision(gun) and Loaded(gun) and \
                PointOfInterest(gun, area)
    method gun:
        precond:
            HasNightvision(gun) and Loaded(gun) and PointOfInterest(gun, area)
        subtasks:
            AchieveCloseTo(gun, area)
            PlaceInInventory(gun, area)
    optimistic:
        PlaceInInventoryCost
    pessimistic:
        MoveToPointCost + PlaceInInventoryCost + 2 * Epsilon
    level:
        2

task AchieveUncovered:
    delete:
        Covered
    method:
        precond:
            not Covered
    method:
        precond:
            Covered
        subtasks:
            Uncover
    optimistic:
        0
    pessimistic:
        UncoverCost + Epsilon
    level:
        3

task AchieveCovered(area):
    precond:
        At(area) and AtCoverpoint(area)
    add:
        Covered
    delete:
        NotCloseToPoint
        CloseTo(point) forall point \
            if PointOfInterest(point, area) and not Coverpoint(point)
    abstract:
        CloseTo(coverpoint) forall coverpoint \
            if PointOfInterest(coverpoint, area) and Coverpoint(coverpoint)
    method:
        precond:
            Covered
    method:
        precond:
            not Covered
        subtasks:
            TakeCover(area)
    optimistic:
        0
    pessimistic:
        MoveToPointCost + TakeCoverCost + 3 * Epsilon
    level:
        3

task AchieveLighted(area):
    precond:
        At(area)
    add:
        Lighted(area)
    delete:
        Covered if not Lighted(area)
    abstract:
        NotCloseToPoint
        CloseTo(point) forall point if PointOfInterest(point, area)
    method:
        precond:
            Lighted(area)
    method controlbox:
        precond:
            not Lighted(area)
        subtasks:
            AchieveUncovered
            TurnLightOn(area)
    optimistic:
        0
    pessimistic:
        UncoverCost + MoveToPointCost + TurnLightOnCost + 4 * Epsilon
    level:
        4

task AchieveDark(area):
    precond:
        At(area)
    delete:
        Lighted(area)
        Covered if not Lighted(area)
    abstract:
        NotCloseToPoint
        CloseTo(point) forall point if PointOfInterest(point, area)
    method:
        precond:
            not Lighted(area)
    method controlbox:
        precond:
            Lighted(area)
        subtasks:
            AchieveUncovered
            TurnLightOff(area)
    optimistic:
        0
    pessimistic:
        UncoverCost + MoveToPointCost + TurnLightOffCost + 4 * Epsilon
    level:
        4

task Navigate(area1, area2, depth):
    precond:
        At(area1) and not Covered
    add:
        At(area2)
    delete:
        At(area1) if area1 != area2
        CloseTo(point) forall point \
            if CloseTo(point) and not PointOfInterest(point, area2)
    abstract:
        NotCloseToPoint
        Open(waypoint) forall waypoint \
            if Waypoint(waypoint) and not Open(waypoint)
        PointOfInterest(tool, area) forall tool, area \
            if Tool(tool) and PointOfInterest(tool, area)
        Holding(tool) forall tool if Tool(tool) and not Holding(tool)
        Lighted(area) forall area, waypoint \
            if Waypoint(waypoint) and PointOfInterest(waypoint, area) and \
               not Open(waypoint)
    method:
        precond:
            area1 == area2
    method area', waypoint:
        precond:
            area1 != area2 and depth < MaxDistance
            Connected(area', area2, waypoint) and Open(waypoint)
        subtasks:
            Navigate(area1, area', depth + 1)
            AchieveCloseTo(waypoint, area')
            Move(area', area2, waypoint)
    method area', waypoint:
        precond:
            area1 != area2 and depth < MaxDistance
            Connected(area', area2, waypoint) and not Open(waypoint)
            HoldingTool
        subtasks:
            Navigate(area1, area', depth + 1)
            AchieveCloseTo(waypoint, area')
            MakeAccessible(area', area2, waypoint)
            Move(area', area2, waypoint)
    method area', area'', waypoint:
        precond:
            area1 != area2 and depth < MaxDistance
            Connected(area', area2, waypoint) and not Open(waypoint)
            not HoldingTool and AtTool(area'')
        subtasks:
            Navigate(area1, area'', depth + 1)
            AchieveLighted(area'')
            PlaceToolInInventory(area'')
            Navigate(area'', area', depth + 1)
            AchieveCloseTo(waypoint, area')
            MakeAccessible(area', area2, waypoint)
            Move(area', area2, waypoint)
    optimistic:
        MoveCost
    pessimistic:
        (MaxDistance - depth) * (MoveToPointCost + MoveCost + 2 * Epsilon)
    level:
        5

task AchieveAt(area):
    add:
        At(area)
    abstract:
        NotCloseToPoint
        CloseTo(point) forall point if PointOfInterest(point, area)
        Open(waypoint) forall waypoint \
            if Waypoint(waypoint) and not Open(waypoint)
        PointOfInterest(tool, area') forall tool, area' \
            if Tool(tool) and PointOfInterest(tool, area')
        Holding(tool) forall tool if Tool(tool) and not Holding(tool)
        Lighted(area') forall area', waypoint \
            if Waypoint(waypoint) and PointOfInterest(waypoint, area') and \
               not Open(waypoint)
        Covered if Covered
    method:
        precond:
            At(area)
    method area':
        precond:
            At(area') and area' != area
        subtasks:
            AchieveUncovered
            Navigate(area', area, 0)
    optimistic:
        0
    pessimistic:
        MaxDistance * (MoveToPointCost + MoveCost + 2 * Epsilon) + \
        UncoverCost + 2 * Epsilon
    level:
        6

task AchieveHoldingMedikit:
    add:
        HoldingMedikit
    abstract:
        PointOfInterest(medikit, area) forall medikit, area \
            if Medikit(medikit) and PointOfInterest(medikit, area)
        Holding(medikit) forall medikit if Medikit(medikit)
        At(area) forall area if AtMedikit(area)
        Ligthed(area) forall area if Area(area) and not Lighted(area)
        NotCloseToPoint
        CloseTo(point) forall point, area if PointOfInterest(point, area)
        Covered if Covered
    method:
        precond:
            HoldingMedikit
    method area:
        precond:
            not HoldingMedikit and AtMedikit(area)
        subtasks:
            AchieveAt(area)
            AchieveLighted(area)
            AchieveUncovered
            PlaceMedikitInInventory(area)
    optimistic:
        0
    pessimistic:
        MaxDistance * (MoveToPointCost + MoveCost + 2 * Epsilon) + \
        UncoverCost + 2 * Epsilon + \
        MoveToPointCost + TurnLightOnCost + 3 * Epsilon + \
        UncoverCost + Epsilon + \
        MoveToPointCost + PlaceInInventoryCost + 3 * Epsilon
    level:
        7

task AchieveHoldingKnife:
    add:
        HoldingKnife
    abstract:
        PointOfInterest(knife, area) forall knife, area \
            if Knife(knife) and PointOfInterest(knife, area)
        Holding(knife) forall knife if Knife(knife)
        At(area) forall area if AtKnife(area)
        Ligthed(area) forall area if Area(area) and not Lighted(area)
        NotCloseToPoint
        CloseTo(point) forall point, area if PointOfInterest(point, area)
        Covered if Covered
    method:
        precond:
            HoldingKnife
    method area:
        precond:
            not HoldingKnife and AtKnife(area)
        subtasks:
            AchieveAt(area)
            AchieveLighted(area)
            AchieveUncovered
            PlaceKnifeInInventory(area)
    optimistic:
        0
    pessimistic:
        MaxDistance * (MoveToPointCost + MoveCost + 2 * Epsilon) + \
        UncoverCost + 2 * Epsilon + \
        MoveToPointCost + TurnLightOnCost + 3 * Epsilon + \
        UncoverCost + Epsilon + \
        MoveToPointCost + PlaceInInventoryCost + 3 * Epsilon
    level:
        7

task AchieveHoldingAmmo:
    add:
        HoldingAmmo
    abstract:
        PointOfInterest(ammo, area) forall ammo, area \
            if Ammo(ammo) and PointOfInterest(ammo, area)
        Holding(ammo) forall ammo if Ammo(ammo)
        At(area) forall area if AtAmmo(area)
        Ligthed(area) forall area if Area(area) and not Lighted(area)
        NotCloseToPoint
        CloseTo(point) forall point, area if PointOfInterest(point, area)
        Covered if Covered
    method:
        precond:
            HoldingAmmo
    method area:
        precond:
            not HoldingAmmo and AtAmmo(area)
        subtasks:
            AchieveAt(area)
            AchieveLighted(area)
            AchieveUncovered
            PlaceAmmoInInventory(area)
    optimistic:
        0
    pessimistic:
        MaxDistance * (MoveToPointCost + MoveCost + 2 * Epsilon) + \
        UncoverCost + 2 * Epsilon + \
        MoveToPointCost + TurnLightOnCost + 3 * Epsilon + \
        UncoverCost + Epsilon + \
        MoveToPointCost + PlaceInInventoryCost + 3 * Epsilon
    level:
        7

task AchieveHoldingGun:
    add:
        HoldingGun
    abstract:
        PointOfInterest(gun, area) forall gun, area \
            if Gun(gun) and PointOfInterest(gun, area)
        Holding(gun) forall gun if Gun(gun)
        At(area) forall area if AtGun(area)
        Ligthed(area) forall area if Area(area) and not Lighted(area)
        NotCloseToPoint
        CloseTo(point) forall point, area if PointOfInterest(point, area)
        Covered if Covered
    method:
        precond:
            HoldingGun
    method area:
        precond:
            not HoldingGun and AtGun(area)
        subtasks:
            AchieveAt(area)
            AchieveLighted(area)
            AchieveUncovered
            PlaceGunInInventory(area)
    optimistic:
        0
    pessimistic:
        MaxDistance * (MoveToPointCost + MoveCost + 2 * Epsilon) + \
        UncoverCost + 2 * Epsilon + \
        MoveToPointCost + TurnLightOnCost + 3 * Epsilon + \
        UncoverCost + Epsilon + \
        MoveToPointCost + PlaceInInventoryCost + 3 * Epsilon
    level:
        7

task AchieveHoldingGunWithNightvision:
    add:
        HoldingGun
        HoldingGunWithNightvision
    abstract:
        PointOfInterest(gun, area) forall gun, area \
            if HasNightvision(gun) and PointOfInterest(gun, area)
        Holding(gun) forall gun if HasNightvision(gun)
        At(area) forall area if AtGunWithNightvision(area)
        Ligthed(area) forall area if Area(area) and not Lighted(area)
        NotCloseToPoint
        CloseTo(point) forall point, area if PointOfInterest(point, area)
        Covered if Covered
    method:
        precond:
            HoldingGunWithNightvision
    method area:
        precond:
            not HoldingGunWithNightvision and AtGunWithNightvision(area)
        subtasks:
            AchieveAt(area)
            AchieveLighted(area)
            AchieveUncovered
            PlaceGunWithNightvisionInInventory(area)
    optimistic:
        0
    pessimistic:
        MaxDistance * (MoveToPointCost + MoveCost + 2 * Epsilon) + \
        UncoverCost + 2 * Epsilon + \
        MoveToPointCost + TurnLightOnCost + 3 * Epsilon + \
        UncoverCost + Epsilon + \
        MoveToPointCost + PlaceInInventoryCost + 3 * Epsilon
    level:
        7

task AchieveHoldingLoadedGun:
    add:
        HoldingLoadedGun
    abstract:
        PointOfInterest(item, area) forall item, area \
            if Ammo(item) or Loaded(item) and PointOfInterest(item, area)
        Holding(item) forall item if Ammo(item) or Gun(item)
        Loaded(gun) forall gun if Gun(gun) and not Loaded(gun)
        At(area) forall area if Area(area)
        Ligthed(area) forall area if Area(area) and not Lighted(area)
        NotCloseToPoint
        CloseTo(point) forall point, area if PointOfInterest(point, area)
        Covered if Covered
    method:
        precond:
            HoldingLoadedGun
    method area:
        precond:
            not HoldingLoadedGun and AtLoadedGun(area)
        subtasks:
            AchieveAt(area)
            AchieveLighted(area)
            AchieveUncovered
            PlaceLoadedGunInInventory(area)
    method:
        precond:
            not HoldingLoadedGun
        subtasks:
            AchieveHoldingGun
            AchieveHoldingAmmo
            ReloadGun
    optimistic:
        0
    pessimistic:
        2 * (
            MaxDistance * (MoveToPointCost + MoveCost + 2 * Epsilon) + \
            UncoverCost + 2 * Epsilon + \
            MoveToPointCost + TurnLightOnCost + 3 * Epsilon + \
            UncoverCost + Epsilon + \
            MoveToPointCost + PlaceInInventoryCost + 3 * Epsilon) + \
        ReloadCost + 2 * Epsilon
    level:
        7

task AchieveHoldingLoadedGunWithNightvision:
    add:
        HoldingLoadedGun
        HoldingLoadedGunWithNightvision
    abstract:
        PointOfInterest(item, area) forall item, area \
            if Ammo(item) or (Loaded(item) and HasNightvision(item)) and \
               PointOfInterest(item, area)
        Holding(item) forall item if Ammo(item) or HasNightvision(item)
        Loaded(gun) forall gun if HasNightvision(gun) and not Loaded(gun)
        At(area) forall area if Area(area)
        Ligthed(area) forall area if Area(area) and not Lighted(area)
        NotCloseToPoint
        CloseTo(point) forall point, area if PointOfInterest(point, area)
        Covered if Covered
    method:
        precond:
            HoldingLoadedGunWithNightvision
    method area:
        precond:
            not HoldingLoadedGunWithNightvision
            AtLoadedGunWithNightvision(area)
        subtasks:
            AchieveAt(area)
            AchieveLighted(area)
            AchieveUncovered
            PlaceLoadedGunWithNightvisionInInventory(area)
    method:
        precond:
            not HoldingLoadedGunWithNightvision
        subtasks:
            AchieveHoldingGunWithNightvision
            AchieveHoldingAmmo
            ReloadGunWithNightvision
    optimistic:
        0
    pessimistic:
        2 * (
            MaxDistance * (MoveToPointCost + MoveCost + 2 * Epsilon) + \
            UncoverCost + 2 * Epsilon + \
            MoveToPointCost + TurnLightOnCost + 3 * Epsilon + \
            UncoverCost + Epsilon + \
            MoveToPointCost + PlaceInInventoryCost + 3 * Epsilon) + \
        ReloadCost + 2 * Epsilon
    level:
        7

task AchieveFullHealth:
    delete:
        Injured
    abstract:
        PointOfInterest(medikit, area) forall medikit, area \
            if Medikit(medikit) and PointOfInterest(medikit, area)
        Holding(medikit) forall medikit \
            if Medikit(medikit) and Holding(medikit)
        At(area) forall area if Area(area)
        Ligthed(area) forall area if Area(area) and not Ligthed(area)
        NotCloseToPoint
        CloseTo(point) forall point, area if PointOfInterest(point, area)
        Covered if Covered
    method:
        precond:
            not Injured
    method:
        precond:
            Injured
        subtasks:
            AchieveHoldingMedikit
            UseMedikit
    optimistic:
        0
    pessimistic:
        MaxDistance * (MoveToPointCost + MoveCost + 2 * Epsilon) + \
        UncoverCost + 2 * Epsilon + \
        MoveToPointCost + TurnLightOnCost + 3 * Epsilon + \
        UncoverCost + Epsilon + \
        MoveToPointCost + PlaceInInventoryCost + 3 * Epsilon + \
        UseMedikitCost + 2 * Epsilon
    level:
        8

task AchieveWounded(player):
    add:
        Wounded(player)
    abstract:
        PointOfInterest(item, area) forall item, area \
            if Item(item) and not Medikit(item) and PointOfInterest(item, area)
        Holding(item) forall item if Item(item) and not Medikit(item)
        At(area) forall area if Area(area)
        Ligthed(area) forall area if Area(area)
        NotCloseToPoint
        CloseTo(point) forall point, area if PointOfInterest(point, area)
        Covered
    method:
        precond:
            Wounded(player)
    method area:
        precond:
            not Wounded(player) and PointOfInterest(player, area)
            AtCoverpoint(area)
        subtasks:
            AchieveHoldingLoadedGunWithNightvision
            AchieveAt(area)
            AchieveDark(area)
            AchieveCovered(area)
            SneakKillFromCover(player, area)
    method area:
        precond:
            not Wounded(player) and PointOfInterest(player, area)
            not AtCoverpoint(area)
        subtasks:
            AchieveHoldingLoadedGunWithNightvision
            AchieveAt(area)
            AchieveDark(area)
            AchieveUncovered
            SneakKill(player, area)
    method area:
        precond:
            not Wounded(player) and PointOfInterest(player, area)
            AtCoverpoint(area)
        subtasks:
            AchieveHoldingLoadedGun
            AchieveAt(area)
            AchieveLighted(area)
            AchieveCovered(area)
            AttackRangedFromCover(player, area)
    method area:
        precond:
            not Wounded(player) and PointOfInterest(player, area)
            not AtCoverpoint(area)
        subtasks:
            AchieveHoldingLoadedGun
            AchieveAt(area)
            AchieveLighted(area)
            AchieveUncovered
            AttackRanged(player, area)
    method area:
        precond:
            not Wounded(player) and PointOfInterest(player, area)
        subtasks:
            AchieveHoldingKnife
            AchieveAt(area)
            AchieveLighted(area)
            AchieveUncovered
            AttackMelee(player, area)
    optimistic:
        0
    pessimistic:
        """A level always contains a knife, so we can assess that a
        pessimistic solution consist in getting a knife and attacking
        the player in melee."""
        # Cost of getting a knife.
        MaxDistance * (MoveToPointCost + MoveCost + 2 * Epsilon) + \
        UncoverCost + 2 * Epsilon + \
        MoveToPointCost + TurnLightOnCost + 3 * Epsilon + \
        UncoverCost + Epsilon + \
        MoveToPointCost + PlaceInInventoryCost + 3 * Epsilon + \
        # Cost of travelling to player area.
        MaxDistance * (MoveToPointCost + MoveCost + 2 * Epsilon) + \
        UncoverCost + 2 * Epsilon + \
        # Cost of lighting player area.
        MoveToPointCost + TurnLightOnCost + 3 * Epsilon + \
        # Cost of uncovering.
        UncoverCost + Epsilon + \
        # Cost of attacking player in melee
        MoveToPointCost + AttackMeleeCost + 2 * Epsilon + \
        # Add Epsilon to be sure that the cost will be stricly decreasing.
        Epsilon
    level:
        8
